//
// TextReplace.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Single text replacement setting. */

open class TextReplace: Codable {

    /** Original text. */
    public var oldValue: String
    /** New text. */
    public var newValue: String
    /** Gets or sets a value indicating whether search text is regular expression. */
    public var regex: Bool
    /** Text properties of a new text. */
    public var textState: TextState?
    /** Rectangle area where searched original text. */
    public var rect: Rectangle?


    
    public init(oldValue: String, newValue: String, regex: Bool, textState: TextState?, rect: Rectangle?) {
        self.oldValue = oldValue
        self.newValue = newValue
        self.regex = regex
        self.textState = textState
        self.rect = rect
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(oldValue, forKey: "OldValue")
        try container.encode(newValue, forKey: "NewValue")
        try container.encode(regex, forKey: "Regex")
        try container.encodeIfPresent(textState, forKey: "TextState")
        try container.encodeIfPresent(rect, forKey: "Rect")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        oldValue = try container.decode(String.self, forKey: "OldValue")
        newValue = try container.decode(String.self, forKey: "NewValue")
        regex = try container.decode(Bool.self, forKey: "Regex")
        textState = try container.decodeIfPresent(TextState.self, forKey: "TextState")
        rect = try container.decodeIfPresent(Rectangle.self, forKey: "Rect")
    }
}

