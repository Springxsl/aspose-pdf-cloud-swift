//
// Link.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Provides information for the object link. This is supposed to be an atom:link, therefore it should have all attributes specified here http://tools.ietf.org/html/rfc4287#section-4.2.7 */

open class Link: Codable {

    /** The \&quot;href\&quot; attribute contains the link&#39;s IRI. atom:link elements MUST have an href attribute, whose value MUST be a IRI reference */
    public var href: String?
    /** atom:link elements MAY have a \&quot;rel\&quot; attribute that indicates the link relation type.  If the \&quot;rel\&quot; attribute is not present, the link element MUST be interpreted as if the link relation type is \&quot;alternate\&quot;. */
    public var rel: String?
    /** On the link element, the \&quot;type\&quot; attribute&#39;s value is an advisory media type: it is a hint about the type of the representation that is expected to be returned when the value of the href attribute is dereferenced.  Note that the type attribute does not override the actual media type returned with the representation. */
    public var type: String?
    /** The \&quot;title\&quot; attribute conveys human-readable information about the link.  The content of the \&quot;title\&quot; attribute is Language-Sensitive. */
    public var title: String?


    
    public init(href: String?, rel: String?, type: String?, title: String?) {
        self.href = href
        self.rel = rel
        self.type = type
        self.title = title
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(href, forKey: "Href")
        try container.encodeIfPresent(rel, forKey: "Rel")
        try container.encodeIfPresent(type, forKey: "Type")
        try container.encodeIfPresent(title, forKey: "Title")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        href = try container.decodeIfPresent(String.self, forKey: "Href")
        rel = try container.decodeIfPresent(String.self, forKey: "Rel")
        type = try container.decodeIfPresent(String.self, forKey: "Type")
        title = try container.decodeIfPresent(String.self, forKey: "Title")
    }
}

