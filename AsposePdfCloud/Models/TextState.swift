//
// TextState.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Represents a text state of a text */

open class TextState: Codable {

    /** Gets or sets font size of the text. */
    public var fontSize: Double
    /** Gets or sets font of the text. */
    public var font: String?
    /** Gets or sets foreground color of the text. */
    public var foregroundColor: Color?
    /** Sets background color of the text. */
    public var backgroundColor: Color?
    /** Sets font style of the text. */
    public var fontStyle: FontStyles


    
    public init(fontSize: Double, font: String?, foregroundColor: Color?, backgroundColor: Color?, fontStyle: FontStyles) {
        self.fontSize = fontSize
        self.font = font
        self.foregroundColor = foregroundColor
        self.backgroundColor = backgroundColor
        self.fontStyle = fontStyle
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(fontSize, forKey: "FontSize")
        try container.encodeIfPresent(font, forKey: "Font")
        try container.encodeIfPresent(foregroundColor, forKey: "ForegroundColor")
        try container.encodeIfPresent(backgroundColor, forKey: "BackgroundColor")
        try container.encode(fontStyle, forKey: "FontStyle")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        fontSize = try container.decode(Double.self, forKey: "FontSize")
        font = try container.decodeIfPresent(String.self, forKey: "Font")
        foregroundColor = try container.decodeIfPresent(Color.self, forKey: "ForegroundColor")
        backgroundColor = try container.decodeIfPresent(Color.self, forKey: "BackgroundColor")
        fontStyle = try container.decode(FontStyles.self, forKey: "FontStyle")
    }
}

